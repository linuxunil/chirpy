// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefresh = `-- name: CreateRefresh :one
insert into refresh_tokens (token, created_at, updated_at, user_id, expires_at)
values ( $1, $2, $3, $4, $5)
returning token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshParams struct {
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefresh(ctx context.Context, arg CreateRefreshParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefresh,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
select token, created_at, updated_at, user_id, expires_at, revoked_at from refresh_tokens where token = $1
`

func (q *Queries) GetToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
update refresh_tokens
set revoked_at = $2, updated_at = $2
where token = $1
`

type RevokeTokenParams struct {
	Token     string       `json:"token"`
	RevokedAt sql.NullTime `json:"revoked_at"`
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.Token, arg.RevokedAt)
	return err
}
